#!/usr/bin/env python3
""" 
This script has been generated by AI with minor tweaks from the author

This script converts the .hfai file, which contains the start addresses of arrays in memory to a cheader
"""

import sys

# Programmable offset
OFFSET = 0x80000000

# Filenames for input and output
INPUT_FILE = "../../image-gen/arrays.hfai"
OUTPUT_FILE = "data_pointers.h"


def generate_header(input_file, output_file, offset):
    # This will hold the maximum stop address found in the file.
    max_stop_address = 0

    try:
        with open(input_file, "r") as infile, open(output_file, "w") as outfile:
            # Write include guard and include stdint.h
            outfile.write("#ifndef DATA_POINTERS_H\n")
            outfile.write("#define DATA_POINTERS_H\n\n")
            outfile.write("#include <stdint.h>\n\n")

            # Read the header line and discard it.
            header = infile.readline()

            # Process each subsequent line. The file is expected to have:
            # name start stop zero_extensions
            for line in infile:
                line = line.strip()
                if not line or line.startswith("#"):
                    continue

                parts = line.split()
                if len(parts) < 3:
                    continue  # Skip lines that don't have the expected columns

                name = parts[0]

                # Convert the start address. If it fails, skip the line.
                try:
                    start_address = int(parts[1], 16)
                except ValueError:
                    continue

                # Also update the maximum stop address if possible.
                try:
                    stop_address = int(parts[2], 16)
                except ValueError:
                    stop_address = 0  # fallback if conversion fails

                if stop_address > max_stop_address:
                    max_stop_address = stop_address

                # Compute the final start address with the offset.
                final_value = offset + start_address

                # Write the constant definition.
                outfile.write(
                    "const uint32_t {} = 0x{:08X};\n".format(name, final_value))

            # Append the additional pointer for the unallocated space.
            # It starts at the last possible end address (max_stop_address) plus the offset.
            final_unallocated = offset + max_stop_address
            outfile.write("\n// Additional pointer for unallocated memory\n")
            outfile.write(
                "const uint32_t unallocated = 0x{:08X};\n".format(final_unallocated))

            outfile.write("\n#endif // DATA_POINTERS_H\n")

        print(f"Header file '{output_file}' generated successfully.")

    except IOError as e:
        print(f"An error occurred while reading or writing files: {e}")
        sys.exit(1)


if __name__ == "__main__":
    generate_header(INPUT_FILE, OUTPUT_FILE, OFFSET)
