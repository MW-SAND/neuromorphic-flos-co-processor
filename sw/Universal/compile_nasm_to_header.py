#!/usr/bin/env python3
""" 
This script has been generated by AI with minor tweaks from the author

The script compiles the assembly for the co-processor to machine code in a c header
"""


import sys
import subprocess
import os


def call_pseudocompiler(nasm_file, temp_hex_file):
    """
    Calls the pseudcompiler.py script with the given NASM file and temporary hex file.
    If pseudcompiler.py is in the same directory, we assume that 'python' can run it.
    """
    try:
        # Call pseudcompiler.py with the provided input NASM file and temporary HEX file.
        result = subprocess.run(
            ["python3", "pseudocompiler.py", nasm_file, temp_hex_file],
            capture_output=True,
            text=True,
            check=True
        )
    except subprocess.CalledProcessError as e:
        print("Error calling pseudcompiler.py:")
        print(e.stdout)
        print(e.stderr)
        sys.exit(1)


def create_header_file(hex_file, header_file):
    """
    Reads the hex_file and writes a C header file containing a constant uint32_t array
    called cfs_configuration with the hex values.
    """
    try:
        with open(hex_file, "r") as f:
            # Remove any blank lines and trim whitespace.
            hex_lines = [line.strip() for line in f if line.strip()]
    except Exception as e:
        print("Could not open or read the hex file:", hex_file)
        print(e)
        sys.exit(1)

    # Construct header file content.
    header_content = []
    header_content.append("/* Auto-generated configuration header file */")
    header_content.append("#ifndef CFS_CONFIGURATION_H")
    header_content.append("#define CFS_CONFIGURATION_H")
    header_content.append("")
    header_content.append("#include <stdint.h>")
    header_content.append("")
    header_content.append("const uint32_t cfs_configuration[] = {")

    for value in hex_lines:
        # Ensure we prefix with "0x" and append a comma.
        header_content.append("    0x" + value + ",")

    header_content.append("};")
    header_content.append("")
    header_content.append("#endif // CFS_CONFIGURATION_H")

    try:
        with open(header_file, "w") as f:
            f.write("\n".join(header_content))
    except Exception as e:
        print("Could not write the header file:", header_file)
        print(e)
        sys.exit(1)


def main():
    if len(sys.argv) != 3:
        print("Usage: python make_header.py input.nasm output.h")
        sys.exit(1)

    nasm_file = sys.argv[1]
    header_file = sys.argv[2]

    # Create a temporary file name for the hex output.
    temp_hex_file = "acc_program.hex"

    # Step 1: Call pseudcompiler.py to generate the hex file.
    call_pseudocompiler(nasm_file, temp_hex_file)

    # Step 2: Read the hex file and create the header file.
    create_header_file(temp_hex_file, header_file)

    # Optional: Remove the temporary hex file.
    # try:
    #     os.remove(temp_hex_file)
    # except Exception as e:
    #     print("Warning: Could not remove temporary file:", temp_hex_file)

    print(f"Header file '{header_file}' generated successfully.")


if __name__ == "__main__":
    main()
