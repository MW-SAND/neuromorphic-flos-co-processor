#!/usr/bin/env python3
""" 
This script has been generated by AI with minor tweaks from the author

This script converts a row of hex files into multiple rows of hex files and interleaves the data
"""

import sys
import os


def process_file(index):
    # Construct file names based on the index; using 3-digit zero padding
    original_filename = f"neorv32_data32_image_0_{index:03d}.hex"
    new_filename = f"neorv32_data32_image_1_{index:03d}.hex"

    # Check if the original file exists
    if not os.path.exists(original_filename):
        print(f"[Warning] File {original_filename} does not exist. Skipping.")
        return

    # Read all lines from the original file
    with open(original_filename, "r") as file:
        lines = file.readlines()

    kept_lines = []
    removed_lines = []

    # Iterate over lines and separate them:
    # We keep the first line and then remove every second line.
    # (Indices 0,2,4,... are kept; indices 1,3,5,... are removed.)
    for idx, line in enumerate(lines):
        if idx % 2 == 0:
            kept_lines.append(line)
        else:
            removed_lines.append(line)

    # Overwrite the original file with the kept lines
    with open(original_filename, "w") as file:
        file.writelines(kept_lines)

    # Write the removed lines to the new file (this file is created or overwritten)
    with open(new_filename, "w") as file:
        file.writelines(removed_lines)

    print(
        f"Processed {original_filename}: {len(kept_lines)} lines kept, "
        f"{len(removed_lines)} lines moved to {new_filename}"
    )


def main():
    # Ensure exactly one argument is provided (besides the script name)
    if len(sys.argv) != 2:
        print(f"Usage: {sys.argv[0]} <number_of_files>")
        sys.exit(1)

    try:
        num_files = int(sys.argv[1])
    except ValueError:
        print("Error: The number of files must be an integer.")
        sys.exit(1)

    # Process each file according to its index
    for i in range(num_files):
        process_file(i)


if __name__ == "__main__":
    main()
